{
  "version": 3,
  "sources": ["../../../../../apps/futilitap/futilitap/public/js/address_query_filters.js", "../../../../../apps/futilitap/futilitap/public/js/contact_qentry.js"],
  "sourcesContent": ["// Description: Query filters for Address doctype.\n// Author: Ismail Tabtabai\n// Version: 0.0.1\n// Last Update: 2023-12-17\n\nfrappe.provide('frappe.ui.form');\n\nfrappe.ui.form.on('Address', {\n    country: function(frm) {\n        if (!frm.doc.country) {\n            // Clear the dependent fields only if country is cleared\n            ['city', 'county', 'state', 'pincode'].forEach(field => {\n                frm.set_value(field, \"\");\n            });\n            return;\n        }\n\n        // Trigger change events for each field to set the query filters\n        ['city', 'county', 'state', 'pincode'].forEach(field => {\n            frm.trigger(field);\n        });\n\n        // Function to set common query based on country\n        function set_common_query(field_name) {\n            frm.set_query(field_name, function() {\n                return {\n                    filters: {\n                        'country': frm.doc.country\n                    }\n                };\n            });\n        }\n\n        // Filter City, County, and State fields based on Country field\n        ['city', 'county', 'state'].forEach(set_common_query);\n    },\n\n    city: function(frm) {\n        if (!frm.doc.city) {\n            // Clear the state field if no city is selected\n            frm.set_value('state', '');\n            return;\n        }\n        // Fetch city details\n        frappe.db.get_value('FUA City', {'name': frm.doc.city}, 'state')\n            .then(r => {\n                // Set the state value in the dialog\n                if (r && r.message && r.message.state) {\n                    frm.set_value('state', r.message.state);\n                } else {\n                    frappe.msgprint(__(\"State not found for city {0}\", frm.doc.city));\n                    frm.set_value('state', \"\");\n                }\n            })\n            .catch(err => {\n                frm.set_value('state', \"\");\n                frappe.msgprint(__(\"Error fetching city details: {0}\", err));\n                console.error(\"Error fetching city {0} details: \", frm.doc.city, err);\n            });\n    },\n});", "frappe.provide('frappe.ui.form');\n\nfrappe.ui.form.ContactQEntry = class ContactQEntry extends frappe.ui.form.QuickEntryForm {\n\n\trender_dialog() {\n\t\tthis.mandatory = this.mandatory.concat(this.get_variant_fields());\n\t\tsuper.render_dialog();\n\n        // Attach onchange handler to country field\n        this.dialog.fields_dict.country.df.onchange = () => {\n                this.country_changed();\n        };\n\n        // Filter cities based on country\n\t\tthis.dialog.fields_dict['city'].get_query = () => {\n\t\t\tlet country = this.dialog.get_value('country');\n\t\t\t// Check if country is selected\n\t\t\tif (!country) {\n\t\t\t\tfrappe.msgprint(__('Please select a country first.'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tfilters: { \"country\": country }\n\t\t\t};\n\t\t};\n\n\t\t// onchange handler for city\n\t\tthis.dialog.fields_dict.city.df.onchange = () => {\n\t\t\tlet cityName = this.dialog.get_value('city');\n\t\t\tif (!cityName) {\n\t\t\t\t// Clear the state field if no city is selected\n\t\t\t\tthis.dialog.set_value('state', '');\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// Fetch city details\n\t\t\tfrappe.db.get_doc('FUA City', cityName)\n\t\t\t\t.then(city => {\n\t\t\t\t\t// Check if city document has a state field\n\t\t\t\t\tif (city && city.state) {\n\t\t\t\t\t\t// Set the state value in the dialog\n\t\t\t\t\t\tthis.dialog.set_value('state', city.state);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Handle cases where state is not set for the city\n\t\t\t\t\t\tthis.dialog.set_value('state', '');\n\t\t\t\t\t\tfrappe.msgprint(__('State information not available for the selected city.'));\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\t// Error handling for failed request\n\t\t\t\t\tfrappe.msgprint(__('Failed to fetch details for the selected city.'));\n\t\t\t\t});\n\t\t};\t\t\n\n\t}\n\n\tget_variant_fields() {\n\t\tvar variant_fields = [{\n\t\t\tfieldtype: \"Section Break\",\n\t\t\tlabel: __(\"Primary Contact Details\"),\n\t\t\tcollapsible: 1\n\t\t},\n\t\t{\n\t\t\tlabel: __(\"Email Id\"),\n\t\t\tfieldname: \"email_address\",\n\t\t\tfieldtype: \"Data\",\n\t\t\toptions: \"Email\",\n\t\t},\n\t\t{\n\t\t\tfieldtype: \"Column Break\"\n\t\t},\n\t\t{\n\t\t\tlabel: __(\"Mobile Number\"),\n\t\t\tfieldname: \"mobile_number\",\n\t\t\tfieldtype: \"Data\"\n\t\t},\n\t\t{\n\t\t\tfieldtype: \"Section Break\",\n\t\t\tlabel: __(\"Primary Address Details\"),\n\t\t\tcollapsible: 1\n\t\t},\n\t\t{\n\t\t\tlabel: __(\"Address Line 1\"),\n\t\t\tfieldname: \"address_line1\",\n\t\t\tfieldtype: \"Data\"\n\t\t},\n\t\t{\n\t\t\tlabel: __(\"Address Line 2\"),\n\t\t\tfieldname: \"address_line2\",\n\t\t\tfieldtype: \"Data\"\n\t\t},\n\t\t{\n\t\t\tlabel: __(\"ZIP Code\"),\n\t\t\tfieldname: \"pincode\",\n\t\t\tfieldtype: \"Data\"\n\t\t},\n\t\t{\n\t\t\tfieldtype: \"Column Break\"\n\t\t},\n\t\t{\n\t\t\tlabel: __(\"Country\"),\n\t\t\tfieldname: \"country\",\n\t\t\tfieldtype: \"Link\",\n\t\t\toptions: \"Country\",\n            default: frappe.sys_defaults.country\n\t\t},\n\t\t{\n\t\t\tlabel: __(\"City\"),\n\t\t\tfieldname: \"city\",\n\t\t\tfieldtype: \"Link\",\n            options: \"FUA City\"\n\t\t},\n\t\t{\n\t\t\tlabel: __(\"State\"),\n\t\t\tfieldname: \"state\",\n\t\t\tfieldtype: \"Link\",\n            options: \"FUA State\",\n\t\t},\n\t\t{\n\t\t\tlabel: __(\"Customer POS Id\"),\n\t\t\tfieldname: \"customer_pos_id\",\n\t\t\tfieldtype: \"Data\",\n\t\t\thidden: 1\n\t\t}];\n\n\t\treturn variant_fields;\n\t}\n\n\tcountry_changed() {\n\t\t// Define the fields to reset\n\t\tconst fieldNames = ['city', 'state'];\n\n\t\t// Check if the dialog is present\n\t\tif (this.dialog) {\n\t\t\tfieldNames.forEach(fieldName => {\n\t\t\t\t// Check if the field exists in the dialog\n\t\t\t\tif (this.dialog.fields_dict[fieldName]) {\n\t\t\t\t\t// Reset the field to blank\n\t\t\t\t\tthis.dialog.set_value(fieldName, '');\n\t\t\t\t} else {\n\t\t\t\t\t// Optionally log or handle the case where a field does not exist\n\t\t\t\t\tconsole.warn(`Field ${fieldName} does not exist in the dialog.`);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\t// Handle the case where the dialog is not defined\n\t\t\tconsole.error('Dialog is not defined.');\n\t\t}\n\t}\n}\n\nfrappe.ui.form.CustomerQuickEntryForm = frappe.ui.form.ContactQEntry;\n"],
  "mappings": "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",
  "names": []
}
